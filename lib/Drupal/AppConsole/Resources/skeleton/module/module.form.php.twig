<?php

/**
 * @file
 * Contains \Drupal\{{module_name}}\Form\{{ class_name }}.
 */

namespace Drupal\{{module_name}}\Form;

{% if services is defined %}
use Symfony\Component\DependencyInjection\ContainerInterface;
use Drupal\Core\Form\FormInterface;
use Drupal\Core\Config\ConfigFactory;
{% set params = '' %}
{% for service in services %}use {{ service.class }};
{% set params = params ~ service.short ~ ' $' ~ service.machine_name %}
{% if loop.last == false %}
{% set params = params ~ ', '%}
{% endif %}
{% endfor %}
{% endif %}
use Drupal\Core\Form\{% if generate_config is defined %}ConfigFormBase{% else %}FormBase{% endif %};

class {{ class_name }} extends {% if generate_config is defined %}ConfigFormBase{% else %}FormBase {% endif %} {% if services is defined %} {% endif %}{

{% if services is defined %}
{% for service in services %}
  protected ${{service.machine_name}};
{% endfor %}

  public function __construct({% if services is not empty %},{%endif%} {{ params }}) {
    {% for service in services %}
    $this->{{service.machine_name}} = ${{service.machine_name}};
    {% endfor %}
  }

  public static function create(ContainerInterface $container){
    return new static(
{% for service in services %}
      $container->get('{{service.name}}'){% if loop.last == false %},
{% endif %}
{% endfor %}
    );
  }
  {% endif %}

  /**
   * {@inheritdoc}
   */
  public function getFormID() {
    return '{{ class_name | lower }}_form';
  }

  /**
   * {@inheritdoc}
   */
  public function buildForm(array $form, array &$form_state) {
    $config = $this->config('{{module_name}}.{{ class_name | lower }}_config');
  {% for input in inputs %}
  $form['{{ input.name }}'] = array(
      '#type' => '{{ input.type }}',
      '#title' => t('{{ input.label }}'),
      '#description' => t(''),
      '#default_value' => $config->get('{{ input.name }}')
    );
  {% endfor %}
   return parent::buildForm($form, $form_state);
  }

  /**
   * {@inheritdoc}
   */
  public function validateForm(array &$form, array &$form_state) {
    return parent::buildForm($form, $form_state);
  }

  /**
   * {@inheritdoc}
   */
  public function submitForm(array &$form, array &$form_state) {
    parent::submitForm($form, $form_state);

    $this->config('{{module_name}}.{{ class_name | lower }}_config')
    {% for input in inputs %}
      ->set('{{ input.name }}', $form_state['values']['{{ input.name }}'])
    {% endfor %}
    ->save();
  }

}
