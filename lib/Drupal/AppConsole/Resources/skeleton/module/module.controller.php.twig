<?php

namespace Drupal\{{module}}\Controller;

use Drupal\Core\Controller\ControllerBase;

{% if services is not empty %}
use Symfony\Component\DependencyInjection\ContainerInterface;
use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
{% set params = '' %}
{% for service in services %}use {{ service.class }};
{% set params = params ~ service.short ~ ' $' ~ service.machine_name %}
{% if loop.last == false %}
{% set params = params ~ ', '%}
{% endif %}
{% endfor %}
{% endif %}

class {{ name }} extends ControllerBase {% if services is not empty %}implements ContainerInjectionInterface {% endif %}{

{% if services is not empty %}
{% for service in services %}
  protected ${{service.machine_name}};
{% endfor %}

  public function __construct({{params}}) {
{% for service in services %}
    $this->{{service.machine_name}} = ${{service.machine_name}};
{% endfor %}
  }

  public static function create(ContainerInterface $container){
    return new static(
{% for service in services %}
      $container->get('{{service.name}}'){% if loop.last == false %},{% endif %}
{% endfor %}
    );
  }
{% endif %}

  /**
   * helloAction
   * @param  string $name Get
   * @return [type]       [description]
   */
  public function hello($name) {
    return "Hello " . $name . "!";
  }
}
