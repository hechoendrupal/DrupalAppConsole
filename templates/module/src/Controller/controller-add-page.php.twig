{% extends "base/class.php.twig" %}

{% block file_path %}
Drupal\{{module}}\Controller\{{ class_name }}.
{% endblock %}

{% block namespace_class %}
namespace Drupal\{{module}}\Controller;
{% endblock %}

{% block use_class %}
use Drupal\Core\Controller\ControllerBase;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityManagerInterface;
use Drupal\Core\Entity\EntityStorageInterface;
use Drupal\Core\Url;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\HttpFoundation\Request;

{% if services is not empty %}
use Symfony\Component\DependencyInjection\ContainerInterface;
{% endif %}
{% endblock %}

{% block class_declaration %}
/**
 * Class {{ class_name }}.
 *
 * @package Drupal\{{ module }}\Controller
 */
class {{ class_name }} extends ControllerBase {% endblock %}
{% block class_construct %}
    public function __construct(EntityStorageInterface $storage, EntityStorageInterface $type_storage) {
      $this->storage = $storage;
      $this->typeStorage = $type_storage;
    }
{% endblock %}
{% block class_create %}

    /**
    * {@inheritdoc}
    */
    public static function create(ContainerInterface $container) {
      /** @var EntityManagerInterface $entity_manager */
      $entity_manager = $container->get('entity.manager');
      return new static(
        $entity_manager->getStorage('{{ entity_name }}'),
        $entity_manager->getStorage('{{ bundle_entity_type }}')
      );
    }
{% endblock %}
{% block class_methods %}
    public function add(Request $request) {
      $types = $this->typeStorage->loadMultiple();
      if ($types && count($types) == 1) {
        $type = reset($types);
        return $this->addForm($type, $request);
      }
      if (count($types) === 0) {
        return array(
          '#markup' => $this->t('You have not created any %bundle types yet. @link to add a new type.', [
            '%bundle' => '{{ label }}',
            '@link' => $this->l($this->t('Go to the type creation page'), Url::fromRoute('entity.{{ bundle_entity_type }}.add_form')),
          ]),
        );
      }
      return array('#theme' => '{{ entity_name }}_content_add_list', '#content' => $types);
    }

    public function addForm(EntityInterface ${{ bundle_entity_type }}, Request $request) {
      $entity = $this->storage->create(array(
        'type' => ${{ bundle_entity_type }}->id()
      ));
      return $this->entityFormBuilder()->getForm($entity);
    }

    public function getAddFormTitle(EntityInterface ${{ bundle_entity_type }}) {
      return t('Create of bundle @label',
        array('@label' => ${{ bundle_entity_type }}->label())
      );
    }
{% endblock %}
